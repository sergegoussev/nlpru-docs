# Main Methods

The following walks through the methods availible in **nlpru**. For reference of all methods and the parameters/outputs of each, see the article on [Reference of all methods](Reference.rst)

## Semantics

If you want to determine *cosine similarity* between documents, you can use this method. You can use this for two tweets, two sets of tweets concatenated into 2 strings, or really any 2 string objects. The method underlying it is tf-idf.

```python
from nlpru import Similarity
s = Similiarity()

docs = [doc1, doc2]
print(s.Get_similarity(doc))
```

## Preprocessing

Clean allows the preprocessing of text, with two methods availible: one to clean the document (i.e. the tweet or post), and another to check whether a word should be included in subsequent bag-of-words analysis -- to remove stop words, emojis, etc.

### Clean_document

This method takes a tweet and cleans it by removing from it Twitter perticulars, such as `RT` or `@username` symbols.

```python
raw = "Все говорят забудь его, забудь... а вот вы можете ..."
c.Clean_document(raw)
#"Все говорят забудь его забудь а вот вы можете"
```


### Check_word

The method validates whether a specific word can be used for analysis

```python
from nltk.tokenize import word_tokenize 
raw = "Все говорят забудь его, забудь... а вот вы можете ..."

for word in word_tokenize(raw):
    c.Check_word(word)
```

Check_word returns a dictionary with a logical test: 

```python
{
    "status": "ok OR empty",
    "word": "clean word if applicable or NA"
}
```

For example:

```python
word = "твердил"
result = c.Check_word(word)

print(word, result)
#твердил {'status': 'ok', 'word': 'твердить'}

#a few other examples:
#Можно {'status': 'empty', 'word': ''}
#слабому {'status': 'ok', 'word': 'слабый'}
#имеет {'status': 'ok', 'word': 'иметь'}
```

## Topic Analysis

To assign tweets topics, you can specify the keywords you want to categorize a topic to, and *nlpru* will take care of the tagging for you. 


@input parameters for method:
* **dictionary_of_topics** -- specify the topics as dictionary keys and keywords as values for each topic you wish to categorize. For ex:

    <details><summary>See example of topic dictionary</summary>

    ```python
    topic_dict = {
        "topic 1": {
            "contains": [
                "word1",
                "word2"
            ],
            "not": [
                "word3"
            ]
        },
        "topic 2": {
            "contains": [
                "word4",
                "word5"
            ]
        },
        "topic 3": [
            "word6",
            "word7"
        ]
    }
    ```
    </details>

* Enter the tweets you would like to convert: 
    * **tweet_dict** -- dictionary of tweets and tweet text;
    * or you could input tweets as a list, hence you should have the following inputs:
        * For more information on these inputs, see the [**tweet dictionary** construction method](#convert-to-tweet-dictionary) to convert the input into a dictionary.
    
<details><summary>See Python example</summary>

```python
from nlpru import FindTopics

tweet_dict = {
    '1': {'text': 'вот почему б не указать'},
    '2': {'text': "наш Самарский расследование"},
    '3': {'text': "вот он наш не бот"},
    '4': {'text': 'можно обратиться напрямую'},
    '5': {'text': "какое расследование"}
}

topic_dict = {
    "topic 1": {'contains':["почему", "наш"],'not':['бот']},
    "topic 2": {'contains':["расследование", "какой"]},
    "topic 3": ['бот']
}

#first call the overall method and give it the tweets as input
T = FindTopics(tweet_dict=tweet_dict) 
            
#now categorize the tweets by the keyword topic assigned
r = T.Keyword_Match(topic_dict)
```
    
This will yield a result of the following categories:

```python
{
    "1": {
        "text": "вот почему б не указать",
        "clean_words": [
            "почему",
            "указать"
        ],
        "topic": "topic 1"
    },
    "2": {
        "text": "наш Самарский расследование",
        "clean_words": [
            "наш",
            "самарский",
            "расследование"
        ],
        "topic": "applies to 2 topics"
    },
    "3": {
        "text": "вот он наш не бот",
        "clean_words": [
            "наш",
            "бот"
        ],
        "topic": "topic 3"
    },
    "4": {
        "text": "можно обратиться напрямую",
        "clean_words": [
            "обратиться",
            "напрямую"
        ],
        "topic": "none detected"
    },
    "5": {
        "text": "какое расследование",
        "clean_words": [
            "какой",
            "расследование"
        ],
        "topic": "topic 2"
    }
}
```
</details>


## Add conversation affects to topics

As tweets are not isolated in spacce but are usually part of a conversation thread, often with other tweets in a thread not using the listened to keywords, you can use this method to include conversation thread affects and categorize all *downstream* tweets as also on the parent tweet topic. 

@parameters (all optional, the method skips those not specified):
* **quote_list** -- list of tweets quoted by other tweets
* **reply_list** -- list of tweets replying to other other tweets
* **retweet_list** -- list of retweets, where one tweet retweets another
* Also, input the tweets you would like to convert: 
    * **tweet_dict** -- dictionary of tweets and tweet text;
    * or you could input tweets as a list, hence you should have the following inputs:
        * **tweet_list**
        * **tweet_text_index**
        * **tweet_id_index**
        * For more information on these inputs, see the [**tweet dictionary** construction method](#convert-to-tweet-dictionary) to convert the input into a dictionary.
    
For example, first find topics using the `FindTopics` method, then use the output dict to:

```python
from nlpru import Conversations

replies = [('6','1')]
    
c = Conversations(reply_list=replies)
t = c.Recategorize_topics(topic_for_which_to_check="topic 1", tweet_dict=tweet_dict)
```
    
For a full walkthrouh of the reasons why conversation thread affects need to be checked, see  [jupyter notebook walkthrough](https://github.com/sergegoussev/nlpru/blob/master/examples/Topic_and_conversation_thread_categorization_simple.ipynb).